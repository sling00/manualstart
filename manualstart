#!/bin/bash
#Manualstart V1.0
#For PiMP by sling00 
#For issues please post them to: https://github.com/sling00/manualstart
#Thanks to # FWishbringer 04/12/13 for the bulk of the download function that gives the sexy fluid progress bars ;).
#Global Variables
#Stylization stuffs
THELINE='echo -====================================================================-'
SCRIPT_VERSION=1.0.1
#Regular Expressions:
PATHREGEX='/\w+/\w+(\-|\_||)\w+'
MINERREGEX='\w+$'
#echo $MY_DIR
#echo $CONFS
#conf paths, default & user must end in / or the script will fail.
DEFAULTCONFPATH="/opt/pimp/defaultconfs/"
USERCONFPATH="/opt/ifmi/"
#Config file names.
MINERCONF_1="cgminer.scrypt.conf"
MINERCONF_2="cgminer.scryptn.conf"
MINERCONF_3="cgminer.keccak.conf"
MINERCONF_4="cgminer.qubit.conf"
MINERCONF_5="cgminer.jane.conf"
MINERCONF_6="cgminer.groestl.conf"
MINERCONF_7="cgminer.heavy.conf"
MINERCONF_8="cgminer.darkcoin.conf"
MINERCONF_9="cgminer.chacha.conf" #Not yet implemented.
#Miner paths
MINERD1="/opt/sgminer/sgminer"
MINERD2="/opt/sph-sgminer/sgminer"
MINERD3="/opt/cgminer_heavy/cgminer"
MINERD4="/opt/cgminer-3.7.2/cgminer"
MINERD5="/opt/sgminer-scryptjane/sgminer"
MINERD6="/opt/yacminer/yacminer"
#Algo menu names
RESETRUNOPTS="Reset miner run options"
MINER_1="Scrypt"
MINER_2="Scrypt-N (VERT)"
MINER_3="SHA3-Keccak (Maxcoin)"
MINER_4="Qubit"
MINER_5="Scrypt-Jane"
MINER_6="Groestl"
MINER_7="Heavy (Experimental)"
MINER_8="X11 (Darkcoin)"
MINER_9="Scrypt Chacha (Not yet implemented)"
QUIT_NAME="Quit"

#Script functions.
#Download function, called by checkdefaultconfs
function f.scriptcreds() { 
clear
if [ "$UID" -ne 0 ]
  then echo "ERROR: Please run as root"
  exit 1
  else
$THELINE
echo -e '\E[00;34m'"\033[1m        PiMP Miner manualstart / debugging tool Version $SCRIPT_VERSION\033[0m"
echo -e '\E[00;31m'"\033[1m        Script by Sling00\033[0m"
$THELINE
echo -e '\E[00;31m'"\033[1m        NOTE: Some default confs do not work on all machines!\033[0m"
$THELINE
fi
}
#manualstart conf path computation:
function f.determineconfpath() {
if [ ! -e /opt/pimp/manualstart.conf ]; then
    MS_DIR=$(dirname $(readlink -f $0))
	MS_CONF="$MS_DIR/manualstart.conf"
	if [ -e $MS_CONF ]; then 
	source $MS_CONF
	else
	f.createconf
	fi 
else
	MS_DIR="/opt/pimp"
	MS_CONF="$MS_DIR/manualstart.conf"
	if [ -e $MS_CONF ]; then
	source $MS_CONF
	else
	f.createconf 
	fi
fi

if [ ! -e $MS_CONF ]; then
	echo "ERROR: Couldn't locate manualstart.conf in either $(dirname $(readlink -f $0)) or /opt/pimp"
	echo "Creating manualstart.conf with defaults."
	sleep 2
		if [ -e /opt/pimp ]; then 
		touch /opt/pimp/manualstart.conf
		f.createconf /opt/pimp/manualstart.conf
		#need line to create conf with default settings inside.
		echo "Created manualstart.conf in /opt/pimp" 
	else 
		SCRIPT_DIR=$(dirname $(readlink -f $0))
		echo $SCRIPT_DIR
	 	touch $SCRIPTDIR/manualstart.conf
	 	f.createconf $SCRIPT_DIR/manualstart.conf
	 	echo "Created manualstart.conf in $SCRIPT_DIR"
	 	sleep 5
	 fi
	else
	echo -e "conf found... $MS_CONF"

fi	
}
f.createconf(){
cat >$1 <<EOL
#Config file for manualstart
CONFS="default"
DASHT="off"
MINERDEBUG="off"
USESCREEN="off"
EOL
}
f.determineconfpath
function download()
{
local URL=$2
local destin=$1
local CLEANURL=`echo $URL | sed -r 's#.*\/([^/]+).*#\1#'`
echo "Downloading $CLEANURL"
wget -O $destin  "$URL" 2>&1 | awk -v bsc=`tput cub1` '/[.] +[0-9]{2}?[0-9]?%/ {
percentage = substr($0,63,3)
byfour = percentage / 4
printf "["
for (i=1; i<=25; i++)
{
  if (i <= byfour)
     printf "="
  else
     printf " "
}
printf "] %3d%%",percentage
for (i=1; i<= 32; i++) {printf bsc}
}
END {printf "[=========================] 100%%\n"}'
}
#called via startminer.x 
function f.minerexec { 
if [ $USESCREEN = on ];
	then 
 	MINEREXEC1=$(echo $MINERD | grep -oP $MINERREGEX )
 	MINEREXEC="screen -S PM-miner ./${MINEREXEC1} "
	else
	MINEREXEC1=$(echo $MINERD | grep -oP $MINERREGEX )
	MINEREXEC="./${MINEREXEC1}"
fi
}
#called by function manualmenu
function f.minerpath() { 
MINERPATH=$(echo $MINERD | grep -oP $PATHREGEX ) 
}

function f.confspath() {
	if [ $CONFS = default ]; then
	CONFDIR="/opt/pimp/defaultconfs/"
	else
	CONFDIR="/opt/ifmi/" 
fi
}
#Scrypt is lame so workaround needed
function f.minerconf() {
	if [ $ALGO = scrypt ];
	then 
	MINERCONF="cgminer.conf"
	else
	MINERCONF="cgminer.${ALGO}.conf"
fi
}
#Mineroptions depending on selected options
function f.mineroptions(){
if [ $DASHT = on -a $MINERDEBUG = on ]; 
	then
	MINEROPTIONS="--api-listen -T --debug"
	elif [ $DASHT = on ]; then
	MINEROPTIONS="--api-listen -T "
	else 
		MINEROPTIONS="--api-listen"
	fi
}
#Miner starting functions, called by manualmenu
function f.startminer(){
	f.mineroptions
	f.confspath
	f.minerexec
	f.minerconf
	echo "Starting $MINER_1 mining with miner \" $MINEREXEC1 \" in $MINERPATH"
	cd $MINERPATH
	${MINEREXEC} -c $CONFDIR$MINERCONF $MINEROPTIONS
}
function f.setoptionsmenu() {
local OPT_1="Select whether to launch with User or Default config files"
local OPT_2="Enable/Disable Miner option -T"
local OPT_3="Enable/Disable Miner option --debug"
local OPT_4="Enable/Disable launching miner in screen"
local RETURN="Return to main menu"
OPTIONS2="\"$OPT_1\" \"$OPT_2\" \"$OPT_3\" \"$OPT_4\" \"$RETURN\""
$THELINE
echo  "      Choose an option to change: "
$THELINE
echo "Current Setting:    Option to Change"
eval set $OPTIONS2
PS3="Select an option: "
	select opt in "$@"; do
		case $opt in
			$RETURN )
			clear
			break 2
			;;
			$OPT_1 )
		if [ $CONFS == default ]; then
			clear
			sed -i -r "s/(CONFS*= *\").*/\1user\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Using user confs" 
			$THELINE
			source $MS_CONF
		else
			clear
			sed -i -r "s/(CONFS*= *\").*/\1default\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Using default confs"
			$THELINE
			source $MS_CONF
		fi
			;;
			$OPT_2 )
		if [ $DASHT == off ]; then
			clear
			sed -i -r "s/(DASHT*= *\").*/\1on\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Starting miner with -T enabled (VERBOSE ON)" 
			$THELINE
			source $MS_CONF
		else
			clear
			sed -i -r "s/(DASHT*= *\").*/\1off\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Miner starting WITHOUT -T (VERBOSE OFF)"
			$THELINE
			source $MS_CONF
		fi
			;;
			$OPT_3 )
		if [ $MINERDEBUG == off ]; then
			clear
			sed -i -r "s/(MINERDEBUG*= *\").*/\1on\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Miner will be started with --debug (SUPER VERBOSE ON)" 
			$THELINE
			source $MS_CONF
		else
			clear
			sed -i -r "s/(MINERDEBUG*= *\").*/\1off\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Miner will be started WITHOUT --debug (SUPER VERBOSE OFF)"
			$THELINE
			source $MS_CONF
		fi
			;;
			$OPT_4 )
		if [ $USESCREEN == off ]; then
			clear
			sed -i -r "s/(USESCREEN*= *\").*/\1on\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Starting will be started with screen" 
			$THELINE
			source $MS_CONF
		else
			clear
			sed -i -r "s/(USESCREEN*= *\").*/\1off\"/" $MS_CONF
			$THELINE
			echo "Setting updated: Miner will be started WITHOUT screen"
			$THELINE
			source $MS_CONF
		fi
			;;
		esac
		REPLY=""
	done
}
function f.manualmenu() {
#$THELINE
while true 
do
OPTIONS="\"$RESETRUNOPTS\" \"$MINER_1\" \"$MINER_2\" \"$MINER_3\" \"$MINER_4\" \"$MINER_5\" \"$MINER_6\" \"$MINER_7\" \"$MINER_8\" \"$MINER_9\" \"$QUIT_NAME\""
PS3="Select a miner: "
echo 'Miners available: '
$THELINE
eval set $OPTIONS
           select opt in "$@"; do
           	PS3="Select a miner: "
               case "$opt" in
               	$RESETRUNOPTS )
			    echo "Function to reset options will be here."
			    clear
			    f.setoptionsmenu
				;;
               	$MINER_1 )
				MINERD="$MINERD1"
				ALGO="scrypt"
				f.minerpath
				f.startminer
				;;
				$MINER_2 )
				MINERD="$MINERD1"
				ALGO="scryptn"
				f.minerpath
				f.startminer
				;;
				$MINER_3 )
				MINERD="$MINERD3"
				ALGO="keccak"
				f.minerpath
				f.startminer
				;;
				$MINER_4 )
				MINERD="$MINERD2"
				ALGO="qubit"
				f.minerpath
				f.startminer
				;;
				$MINER_5 )
				MINERD="$MINERD5"
				ALGO="jane"
				f.minerpath
				f.startminer
				;;
				$MINER_6 )
				MINERD="$MINERD2"
				ALGO="groestl"
				f.minerpath
				f.startminer
				;;
				$MINER_7 )
				MINERD="$MINERD3"
				ALGO="heavy"
				f.minerpath
				f.startminer
				;;
				$MINER_8 )
				MINERD="$MINERD2"
				ALGO="darkcoin"
				f.minerpath
				f.startminer
				;;
				$MINER_9 )
				MINERD="$MINERD6"
				ALGO="yac"
				f.minerpath
				f.startminer
				;;
				$QUIT_NAME )
				echo "Exiting..."
				exit 0
				;;
				* )
			#	echo "$@"
				clear
				echo "Invalid selection, try again"
				#Recall the menu so it will show the options again
				break
				;;
			esac
			REPLY=""
		done
	done
}
function f.checkdefaultconfs (){
	echo "   Checking if Default miner configs exist in /opt/pimp/defaultconfs"
	if [ ! -e "/opt/pimp/defaultconfs/cgminer.conf" ];
	then
	echo -n "Default miner configs not found, do you want to install them? y/n: "
	read DEFAULTCONF_CONTINUE
	if [ $DEFAULTCONF_CONTINUE == y ]; then
		$THELINE
		download /tmp/defaultconfs.tar.bz2 http://hackin.yourshell.net/manualstart/defaultconfs.tar.bz2
		echo "Creating directory /opt/pimp/defaultconfs"
		mkdir /opt/pimp/defaultconfs
		echo "Extracting default miner configurations to /opt/pimp/defaultconfs/"
		tar jxvpf /tmp/defaultconfs.tar.bz2 -C /opt/pimp/defaultconfs > /tmp/pmupdate.log
		echo "Update completed. Please rerun this script to continue."
		rm /tmp/defaultconfs.tar.bz2
		exit 0
	else
	$THELINE
	echo -e '\E[00;31m'"\033[1m        WARNING: Default configuration files not installed\033[0m"
	echo -e '\E[00;31m'"\033[1m        You will be unable to use default config testing.!\033[0m"
	$THELINE
fi
	else 
	echo "      Default configuration files found, continuing!"
	$THELINE
	fi
}

#Actual work begins below... (REALLY LONG SCRIPT RIGHT?)
#CREDITS! SUCH IMPORTANCE!
f.scriptcreds
#Do we haz confs?
f.checkdefaultconfs
#CALL THE MENU!
f.manualmenu
